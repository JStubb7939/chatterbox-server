'use strict';

var request = require('request');
var expect = require('chai').expect;

describe('server', function () {
  it('should respond to GET requests for /classes/messages with a 200 status code', function (done) {
    request('http://127.0.0.1:3000/classes/messages', function (error, response, body) {
      expect(response.statusCode).to.equal(200);
      done();
    });
  });

  it('should send back parsable stringified JSON', function (done) {
    request('http://127.0.0.1:3000/classes/messages', function (error, response, body) {
      expect(JSON.parse.bind(this, body)).to.not.throw();
      done();
    });
  });

  it('should send back an object', function (done) {
    request('http://127.0.0.1:3000/classes/messages', function (error, response, body) {
      var parsedBody = JSON.parse(body);
      expect(parsedBody).to.be.an('object');
      done();
    });
  });

  it('should send an object containing a `results` array', function (done) {
    request('http://127.0.0.1:3000/classes/messages', function (error, response, body) {
      var parsedBody = JSON.parse(body);
      expect(parsedBody).to.be.an('object');
      expect(parsedBody.results).to.be.an('array');
      done();
    });
  });

  it('should accept POST requests to /classes/messages', function (done) {
    var requestParams = { method: 'POST',
      uri: 'http://127.0.0.1:3000/classes/messages',
      json: {
        username: 'Jono',
        message: 'Do my bidding!' }
    };

    request(requestParams, function (error, response, body) {
      expect(response.statusCode).to.equal(201);
      done();
    });
  });

  it('should respond with messages that were previously posted', function (done) {
    var requestParams = { method: 'POST',
      uri: 'http://127.0.0.1:3000/classes/messages',
      json: {
        username: 'Jono',
        message: 'Do my bidding!' }
    };

    request(requestParams, function (error, response, body) {
      // Now if we request the log, that message we posted should be there:
      request('http://127.0.0.1:3000/classes/messages', function (error, response, body) {
        var messages = JSON.parse(body).results;
        expect(messages[0].username).to.equal('Jono');
        expect(messages[0].message).to.equal('Do my bidding!');
        done();
      });
    });
  });

  it('Should 404 when asked for a nonexistent endpoint', function (done) {
    request('http://127.0.0.1:3000/arglebargle', function (error, response, body) {
      expect(response.statusCode).to.equal(404);
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9zcGVjL0xpdmVTZXJ2ZXJJbnRlZ3JhdGlvblNwZWMuanMiXSwibmFtZXMiOlsicmVxdWVzdCIsInJlcXVpcmUiLCJleHBlY3QiLCJkZXNjcmliZSIsIml0IiwiZG9uZSIsImVycm9yIiwicmVzcG9uc2UiLCJib2R5Iiwic3RhdHVzQ29kZSIsInRvIiwiZXF1YWwiLCJKU09OIiwicGFyc2UiLCJiaW5kIiwibm90IiwidGhyb3ciLCJwYXJzZWRCb2R5IiwiYmUiLCJhbiIsInJlc3VsdHMiLCJyZXF1ZXN0UGFyYW1zIiwibWV0aG9kIiwidXJpIiwianNvbiIsInVzZXJuYW1lIiwibWVzc2FnZSIsIm1lc3NhZ2VzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFVBQVVDLFFBQVEsU0FBUixDQUFkO0FBQ0EsSUFBSUMsU0FBU0QsUUFBUSxNQUFSLEVBQWdCQyxNQUE3Qjs7QUFFQUMsU0FBUyxRQUFULEVBQW1CLFlBQVc7QUFDNUJDLEtBQUcsNkVBQUgsRUFBa0YsVUFBU0MsSUFBVCxFQUFlO0FBQy9GTCxZQUFRLHdDQUFSLEVBQWtELFVBQVNNLEtBQVQsRUFBZ0JDLFFBQWhCLEVBQTBCQyxJQUExQixFQUFnQztBQUNoRk4sYUFBT0ssU0FBU0UsVUFBaEIsRUFBNEJDLEVBQTVCLENBQStCQyxLQUEvQixDQUFxQyxHQUFyQztBQUNBTjtBQUNELEtBSEQ7QUFJRCxHQUxEOztBQU9BRCxLQUFHLDRDQUFILEVBQWlELFVBQVNDLElBQVQsRUFBZTtBQUM5REwsWUFBUSx3Q0FBUixFQUFrRCxVQUFTTSxLQUFULEVBQWdCQyxRQUFoQixFQUEwQkMsSUFBMUIsRUFBZ0M7QUFDaEZOLGFBQU9VLEtBQUtDLEtBQUwsQ0FBV0MsSUFBWCxDQUFnQixJQUFoQixFQUFzQk4sSUFBdEIsQ0FBUCxFQUFvQ0UsRUFBcEMsQ0FBdUNLLEdBQXZDLENBQTJDQyxLQUEzQztBQUNBWDtBQUNELEtBSEQ7QUFJRCxHQUxEOztBQU9BRCxLQUFHLDRCQUFILEVBQWlDLFVBQVNDLElBQVQsRUFBZTtBQUM5Q0wsWUFBUSx3Q0FBUixFQUFrRCxVQUFTTSxLQUFULEVBQWdCQyxRQUFoQixFQUEwQkMsSUFBMUIsRUFBZ0M7QUFDaEYsVUFBSVMsYUFBYUwsS0FBS0MsS0FBTCxDQUFXTCxJQUFYLENBQWpCO0FBQ0FOLGFBQU9lLFVBQVAsRUFBbUJQLEVBQW5CLENBQXNCUSxFQUF0QixDQUF5QkMsRUFBekIsQ0FBNEIsUUFBNUI7QUFDQWQ7QUFDRCxLQUpEO0FBS0QsR0FORDs7QUFRQUQsS0FBRyxvREFBSCxFQUF5RCxVQUFTQyxJQUFULEVBQWU7QUFDdEVMLFlBQVEsd0NBQVIsRUFBa0QsVUFBU00sS0FBVCxFQUFnQkMsUUFBaEIsRUFBMEJDLElBQTFCLEVBQWdDO0FBQ2hGLFVBQUlTLGFBQWFMLEtBQUtDLEtBQUwsQ0FBV0wsSUFBWCxDQUFqQjtBQUNBTixhQUFPZSxVQUFQLEVBQW1CUCxFQUFuQixDQUFzQlEsRUFBdEIsQ0FBeUJDLEVBQXpCLENBQTRCLFFBQTVCO0FBQ0FqQixhQUFPZSxXQUFXRyxPQUFsQixFQUEyQlYsRUFBM0IsQ0FBOEJRLEVBQTlCLENBQWlDQyxFQUFqQyxDQUFvQyxPQUFwQztBQUNBZDtBQUNELEtBTEQ7QUFNRCxHQVBEOztBQVNBRCxLQUFHLGtEQUFILEVBQXVELFVBQVNDLElBQVQsRUFBZTtBQUNwRSxRQUFJZ0IsZ0JBQWdCLEVBQUNDLFFBQVEsTUFBVDtBQUNsQkMsV0FBSyx3Q0FEYTtBQUVsQkMsWUFBTTtBQUNKQyxrQkFBVSxNQUROO0FBRUpDLGlCQUFTLGdCQUZMO0FBRlksS0FBcEI7O0FBT0ExQixZQUFRcUIsYUFBUixFQUF1QixVQUFTZixLQUFULEVBQWdCQyxRQUFoQixFQUEwQkMsSUFBMUIsRUFBZ0M7QUFDckROLGFBQU9LLFNBQVNFLFVBQWhCLEVBQTRCQyxFQUE1QixDQUErQkMsS0FBL0IsQ0FBcUMsR0FBckM7QUFDQU47QUFDRCxLQUhEO0FBSUQsR0FaRDs7QUFjQUQsS0FBRywwREFBSCxFQUErRCxVQUFTQyxJQUFULEVBQWU7QUFDNUUsUUFBSWdCLGdCQUFnQixFQUFDQyxRQUFRLE1BQVQ7QUFDbEJDLFdBQUssd0NBRGE7QUFFbEJDLFlBQU07QUFDSkMsa0JBQVUsTUFETjtBQUVKQyxpQkFBUyxnQkFGTDtBQUZZLEtBQXBCOztBQU9BMUIsWUFBUXFCLGFBQVIsRUFBdUIsVUFBU2YsS0FBVCxFQUFnQkMsUUFBaEIsRUFBMEJDLElBQTFCLEVBQWdDO0FBQ3JEO0FBQ0FSLGNBQVEsd0NBQVIsRUFBa0QsVUFBU00sS0FBVCxFQUFnQkMsUUFBaEIsRUFBMEJDLElBQTFCLEVBQWdDO0FBQ2hGLFlBQUltQixXQUFXZixLQUFLQyxLQUFMLENBQVdMLElBQVgsRUFBaUJZLE9BQWhDO0FBQ0FsQixlQUFPeUIsU0FBUyxDQUFULEVBQVlGLFFBQW5CLEVBQTZCZixFQUE3QixDQUFnQ0MsS0FBaEMsQ0FBc0MsTUFBdEM7QUFDQVQsZUFBT3lCLFNBQVMsQ0FBVCxFQUFZRCxPQUFuQixFQUE0QmhCLEVBQTVCLENBQStCQyxLQUEvQixDQUFxQyxnQkFBckM7QUFDQU47QUFDRCxPQUxEO0FBTUQsS0FSRDtBQVNELEdBakJEOztBQW1CQUQsS0FBRyxrREFBSCxFQUF1RCxVQUFTQyxJQUFULEVBQWU7QUFDcEVMLFlBQVEsbUNBQVIsRUFBNkMsVUFBU00sS0FBVCxFQUFnQkMsUUFBaEIsRUFBMEJDLElBQTFCLEVBQWdDO0FBQzNFTixhQUFPSyxTQUFTRSxVQUFoQixFQUE0QkMsRUFBNUIsQ0FBK0JDLEtBQS9CLENBQXFDLEdBQXJDO0FBQ0FOO0FBQ0QsS0FIRDtBQUlELEdBTEQ7QUFRRCxDQXpFRCIsImZpbGUiOiJMaXZlU2VydmVySW50ZWdyYXRpb25TcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG52YXIgZXhwZWN0ID0gcmVxdWlyZSgnY2hhaScpLmV4cGVjdDtcblxuZGVzY3JpYmUoJ3NlcnZlcicsIGZ1bmN0aW9uKCkge1xuICBpdCgnc2hvdWxkIHJlc3BvbmQgdG8gR0VUIHJlcXVlc3RzIGZvciAvY2xhc3Nlcy9tZXNzYWdlcyB3aXRoIGEgMjAwIHN0YXR1cyBjb2RlJywgZnVuY3Rpb24oZG9uZSkge1xuICAgIHJlcXVlc3QoJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9jbGFzc2VzL21lc3NhZ2VzJywgZnVuY3Rpb24oZXJyb3IsIHJlc3BvbnNlLCBib2R5KSB7XG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG8uZXF1YWwoMjAwKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzZW5kIGJhY2sgcGFyc2FibGUgc3RyaW5naWZpZWQgSlNPTicsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICByZXF1ZXN0KCdodHRwOi8vMTI3LjAuMC4xOjMwMDAvY2xhc3Nlcy9tZXNzYWdlcycsIGZ1bmN0aW9uKGVycm9yLCByZXNwb25zZSwgYm9keSkge1xuICAgICAgZXhwZWN0KEpTT04ucGFyc2UuYmluZCh0aGlzLCBib2R5KSkudG8ubm90LnRocm93KCk7XG4gICAgICBkb25lKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc2VuZCBiYWNrIGFuIG9iamVjdCcsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICByZXF1ZXN0KCdodHRwOi8vMTI3LjAuMC4xOjMwMDAvY2xhc3Nlcy9tZXNzYWdlcycsIGZ1bmN0aW9uKGVycm9yLCByZXNwb25zZSwgYm9keSkge1xuICAgICAgdmFyIHBhcnNlZEJvZHkgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgZXhwZWN0KHBhcnNlZEJvZHkpLnRvLmJlLmFuKCdvYmplY3QnKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzZW5kIGFuIG9iamVjdCBjb250YWluaW5nIGEgYHJlc3VsdHNgIGFycmF5JywgZnVuY3Rpb24oZG9uZSkge1xuICAgIHJlcXVlc3QoJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9jbGFzc2VzL21lc3NhZ2VzJywgZnVuY3Rpb24oZXJyb3IsIHJlc3BvbnNlLCBib2R5KSB7XG4gICAgICB2YXIgcGFyc2VkQm9keSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgICBleHBlY3QocGFyc2VkQm9keSkudG8uYmUuYW4oJ29iamVjdCcpO1xuICAgICAgZXhwZWN0KHBhcnNlZEJvZHkucmVzdWx0cykudG8uYmUuYW4oJ2FycmF5Jyk7XG4gICAgICBkb25lKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYWNjZXB0IFBPU1QgcmVxdWVzdHMgdG8gL2NsYXNzZXMvbWVzc2FnZXMnLCBmdW5jdGlvbihkb25lKSB7XG4gICAgdmFyIHJlcXVlc3RQYXJhbXMgPSB7bWV0aG9kOiAnUE9TVCcsXG4gICAgICB1cmk6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAvY2xhc3Nlcy9tZXNzYWdlcycsXG4gICAgICBqc29uOiB7XG4gICAgICAgIHVzZXJuYW1lOiAnSm9ubycsXG4gICAgICAgIG1lc3NhZ2U6ICdEbyBteSBiaWRkaW5nISd9XG4gICAgfTtcblxuICAgIHJlcXVlc3QocmVxdWVzdFBhcmFtcywgZnVuY3Rpb24oZXJyb3IsIHJlc3BvbnNlLCBib2R5KSB7XG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG8uZXF1YWwoMjAxKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXNwb25kIHdpdGggbWVzc2FnZXMgdGhhdCB3ZXJlIHByZXZpb3VzbHkgcG9zdGVkJywgZnVuY3Rpb24oZG9uZSkge1xuICAgIHZhciByZXF1ZXN0UGFyYW1zID0ge21ldGhvZDogJ1BPU1QnLFxuICAgICAgdXJpOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwL2NsYXNzZXMvbWVzc2FnZXMnLFxuICAgICAganNvbjoge1xuICAgICAgICB1c2VybmFtZTogJ0pvbm8nLFxuICAgICAgICBtZXNzYWdlOiAnRG8gbXkgYmlkZGluZyEnfVxuICAgIH07XG5cbiAgICByZXF1ZXN0KHJlcXVlc3RQYXJhbXMsIGZ1bmN0aW9uKGVycm9yLCByZXNwb25zZSwgYm9keSkge1xuICAgICAgLy8gTm93IGlmIHdlIHJlcXVlc3QgdGhlIGxvZywgdGhhdCBtZXNzYWdlIHdlIHBvc3RlZCBzaG91bGQgYmUgdGhlcmU6XG4gICAgICByZXF1ZXN0KCdodHRwOi8vMTI3LjAuMC4xOjMwMDAvY2xhc3Nlcy9tZXNzYWdlcycsIGZ1bmN0aW9uKGVycm9yLCByZXNwb25zZSwgYm9keSkge1xuICAgICAgICB2YXIgbWVzc2FnZXMgPSBKU09OLnBhcnNlKGJvZHkpLnJlc3VsdHM7XG4gICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS51c2VybmFtZSkudG8uZXF1YWwoJ0pvbm8nKTtcbiAgICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLm1lc3NhZ2UpLnRvLmVxdWFsKCdEbyBteSBiaWRkaW5nIScpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ1Nob3VsZCA0MDQgd2hlbiBhc2tlZCBmb3IgYSBub25leGlzdGVudCBlbmRwb2ludCcsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICByZXF1ZXN0KCdodHRwOi8vMTI3LjAuMC4xOjMwMDAvYXJnbGViYXJnbGUnLCBmdW5jdGlvbihlcnJvciwgcmVzcG9uc2UsIGJvZHkpIHtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50by5lcXVhbCg0MDQpO1xuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICB9KTtcblxuXG59KTtcbiJdfQ==